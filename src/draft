// import React, { Component } from 'react';

// enum Choice {
// 	Rock = 'rock',
// 	Paper = 'paper',
// 	Scissors = 'scissors',
// }

// interface State {
// 	balance: number;
// 	playerChoice?: Choice;
// 	computerChoice?: Choice;
// 	result?: string;
// }

// class Game extends Component<object, State> {
// 	state: State = {
// 		balance: 5000,
// 	};

// 	handleBet = (choice: Choice) => {
// 		const { balance, playerChoice } = this.state;
// 		if (balance < 500 || playerChoice) {
// 			return;
// 		}

// 		this.setState({ playerChoice: choice, balance: balance - 500 });
// 	};

// 	handlePlay = () => {
// 		const { playerChoice } = this.state;
// 		if (!playerChoice) {
// 			return;
// 		}

// 		const choices = Object.values(Choice);
// 		const computerChoice = choices[Math.floor(Math.random() * choices.length)];

// 		let result;
// 		if (playerChoice === computerChoice) {
// 			result = 'Tie';
// 		} else if (
// 			(playerChoice === Choice.Rock && computerChoice === Choice.Scissors) ||
// 			(playerChoice === Choice.Paper && computerChoice === Choice.Rock) ||
// 			(playerChoice === Choice.Scissors && computerChoice === Choice.Paper)
// 		) {
// 			result = 'Player wins';
// 			const winnings = this.calculateWinnings(playerChoice, 1);
// 			this.setState(prevState => ({
// 				balance: prevState.balance + winnings,
// 			}));
// 		} else {
// 			result = 'Computer wins';
// 		}

// 		this.setState({ computerChoice, result });
// 	};

// 	calculateWinnings = (playerChoice: Choice, betCount: number) => {
// 		const baseWinningRate = betCount === 1 ? 14 : 3;
// 		return baseWinningRate * 500 * betCount;
// 	};

// 	render() {
// 		const { balance, playerChoice, computerChoice, result } = this.state;

// 		return (
// 			<div>
// 				<h1>Rock Paper Scissors</h1>
// 				<h2>Balance: {balance}</h2>
// 				<div>
// 					<h3>Player&apos;s Choice:</h3>
// 					<button disabled={playerChoice !== undefined} onClick={() => this.handleBet(Choice.Rock)}>
// 						Rock
// 					</button>
// 					<button disabled={playerChoice !== undefined} onClick={() => this.handleBet(Choice.Paper)}>
// 						Paper
// 					</button>
// 					<button disabled={playerChoice !== undefined} onClick={() => this.handleBet(Choice.Scissors)}>
// 						Scissors
// 					</button>
// 				</div>
// 				<div>
// 					<h3>Computer&apos;s Choice:</h3>
// 					{computerChoice ? <p>{computerChoice}</p> : <p>Not selected</p>}
// 				</div>
// 				<button disabled={!playerChoice} onClick={this.handlePlay}>
// 					Play
// 				</button>
// 				{result && <p>Result: {result}</p>}
// 			</div>
// 		);
// 	}
// }

// export default Game;

// addCardToPlayerBet = (card: ICard) => {
// 	this.setState((prevState): AppState => {
// 		const { step } = this.state;
// 		const { playerBet, bet, balance, cards } = prevState;
// 		const updatedBalance = this.handleBalance(balance, bet);

// 		return {
// 			...prevState,
// 			...updatedBalance,
// 			cards: updatedCards,
// 			playerBet: [...playerBet, card],
// 		};
// 	});
// };

// handleBalance = (balance: number, bet: number) => {
// 	const { step } = this.state;
// 	return {
// 		balance: balance - step,
// 		bet: bet + step,
// 	};
// };

// handleStartGame = () => {
// 	const { playerBet, pcBet } = this.state;

// 	if (playerBet.length === 0 || pcBet !== null) {
// 		return;
// 	}

// 	if (playerBet.length === 2) {
// 		this.setState({
// 			winRate: 3,
// 		});
// 	}

// 	this.handlePcBet();
// };	// handleWin = () => {
// 	this.setState((prevState): AppState => {
// 		const { balance, bet } = prevState;
// 		const currentWin = bet * this.state.winRate;
// 		return {
// 			...prevState,
// 			balance: balance + currentWin,
// 			win: currentWin,
// 		};
// 	});
// };

// handleLose = () => {
// 	console.log('lose');
// 	// this.setState((prevState): AppState => {
// 	// });
// };
// componentDidUpdate(prevProps: object, prevState: Readonly<AppState>): void {
// console.log(this.state);
// console.log(prevState);
// if (this.state.balance === 0) {
// 	console.log('balance is 0');
// 	return;
// }
// const { pcBet } = this.state;
// if (pcBet !== prevState.pcBet && pcBet !== null) {
// 	// this.handleWinner();
// }

// if (this.state.playerBet.length === 2) {
// 	console.log('player bet is 2');
// 	return;
// }
// const { playerBet } = this.state;
// }
